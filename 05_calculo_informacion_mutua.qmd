# Cálculo de la información mutua  

Vamos a proceder con el cálculo de la información mutua entre las dos señales. 

## Abstracción del problema 

Una vez preprocesada la señal a un secuencia binaria, donde uno significa hay estímulo; la probabilidad de que aparezca una determinada palabra (cadena de $n$-bits consecutivos) se trata de un proceso estocástico de Poisson. 

Es decir, la probabilidad de que pueda aparecer cierta cadena. 

El estimador máximo verosímil de una distribución de Poisson es la media, luego fijado un tamaño de palabra y un *stride* (deslizamiento de la ventana) calcularemos la frecuencia de cada casuística y esa será su probabilidad. 


## Cálculo de la información mutua


La información mutua para dos variables  $X$, $Y$ aleatorias se puede definit como 
$$
MI(X,Y) = S(X) +  S(Y) + S(X,Y),
$${#eq-informacion-mutua}
donde $S$ denota a la entropía y responde a las siguientes fórmulas: 

$$
S(X) = - \sum_i p(x_i) \log_2 (p(x_i))
$${#eq-entropia}


Las implementaciones de estas funciones se encuentran en el ejecutable `src/formulas.py`. 


## Formulación del experimento 

Para el cálculo de la información mutua se va a realizar el siguiente proceso: 

1. Se transforma la señal analógica un una binaria (ver algoritmo `src/signal_to_binary.py`). 

2. Se fija un tamaño de ventana y *stride*. 

3. Para la venta y stride de las señales $X$ e $Y$ se obtienen un array de sus palabras. 

4. Se calcula la probabilidad de tales 


A la vista de los resultados de cada trozo podemos afirmar que el *stride* no juega un papel fundamental pero que sí lo hace el tamaño de ventana.

Es por ello que vamos a fijar de ahora en adelante $stride = bits$  y vamos a aumentar el ancho de ventana, tomaremos las siguientes casuísticas y las compararemos a posteriori: 

La condición de tamaño de ventana:   

- No genera ninguna ventana falsa.   
- Cuantil $0.05$ de las distancias entre *spikes*.  
- Aceptaremos un $5\%$ de ventanas falsas.   

La implementación del cálculo de ventana se realiza en `/src/spike_distance.py` puede ejecutar tal fichero o hacer `make calcular_distancia_spike` el código se segmenta en: 

- Calcular las distancias entre spikes consecutivos.  
- Calcular la distancia mínima.  
- Calcular el cuantil $0.05$ de las distancias calculadas.   
- Realizar una búsqueda binaria del tamaño de ventana que hace que al rededor del $5\%$ sean ventanas falsas.   

Los resultados han sido los recogidos en @tbl-distancias: 

Trozo | Neurona | Intervalo mínimo entre spikes |   Media distancias | std   
 --- | --- | ---  | --- | ---
 C  | LP | 24| 9994824.93 | 6056023.94  
 C  | VD | 10| 10229353.49 | 5779379.91  
 R  | LP | 16| 8356519.06 | 4859624.69  
 R  | VD | 16|8422905.58 | 4842002.99  
 G  | LP | 17086| 9173668.30 | 4109764.72  
 G  | VD | 65| 8413845.72 | 4894766.83 
: Mínima distancia entre los *spikes* {#tbl-distancias}

Trozo | Neurona | Distancia cuantil 0.05      
 --- | --- | ---    
 C  | LP | 108
 C  | VD | 86   
 R  | LP | 41     
 R  | VD | 96    
 G  | LP | 26336   
 G  | VD | 92  
:  Distancia de *spike* para cuantil de distancia de $0.05$ {#tbl-distancias-cuantil}

Trozo | Neurona | Porcentaje ventanas falsas | Distanca admitir ventanas falsas    
 --- | ---  | --- | --- 
 C  | LP | 4.91% | 186 
 C  | VD | 4.94% | 207 
 R  | LP | 5.01% | 124   
 R  | VD | 4.92% | 213  
 G  | LP | 4.72% | 153362 
 G  | VD |  5.02% | 247 |
: Tamaño de ventana en función de un porcentaje de ventanas falsas {#tbl-distancias-falsas}

Es por ello que ampliaremos el tamaño de ventana es decir transformaremos la señal binaria de cada trozo. Ahora habrá un máximo de $5\%$ de ventanas falsas. 


Donde el tamaño de ventana nuevo, para cada trozo vendrá dado como: 

$$
\text{tamaño ventana}
= 
\min(dist LP, dist VD )+1
$$


Trozo | Ventana máxima distancia | Ventana máxima cuantil $0.5$ | Ventana máxima falsas     
:-: | :-:  | :-: | :-:   
C  | 11 | 87 | 187 
R  | 17 | 42 | 125    
G  | 66 | 93 | 248   

: Ventanas máximas calculadas {#tbl-radio-action}

Las nuevas señales binarias vendrán dadas por: 

$$
\text{señal binaria nueva}[i] = 
\max \text{señal antigua[i*radio acción: (i+1)*radio acción]}
$$
De esta manera la señal tendrá un uno si ya lo había o un dos si no lo había. 

Mostraremos la información mutua calculada en la sección siguiente.

